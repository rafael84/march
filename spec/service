# vim:ft=Marchfile

UserService service {

# implies:
#
# func (s *UserService) List(ctx context.Context) ([]*User, error) {
#   ctx, logger := cid.Track(ctx, tag)
#   users, err := repository.Of(&User{}).List(ctx)
#   if err != nil {
#       logger.W(CouldNotLoadUsersFromRepository.Message, "err", err)
#       return nil, CouldNotLoadUsersFromRepository.WithDetail(err)
#   }
#   return users, nil
# }
    List returns []User {
        from UserRepository do List returning users {
            on FAILURE {
                return CouldNotLoadUsersFromRepository
            }
        }
        return users
    }

#   implies:
#
#   func (s *UserService) Create(ctx context.Context, req *UserCreateRequestValidationFailed) (*User, error) {
#       ctx, logger := cid.Track(ctx, tag)
#       if err := req.Validate(ctx); err != nil {
#           logger.W(UserCreateRequestValidationFailed.Message, "err", err)
#           return nil, UserCreateRequestValidationFailed.WithDetail(err)
#       }
#       user, err := repository.Of(&User{}).Create(ctx, req)
#       if err != nil {
#           logger.W(CouldNotCreateUser.Message, "err", err)
#           return nil, CouldNotCreateUser.WithDetail(err)
#       }
#       return users, nil
#   }
    Create with req UserCreateRequest returns User {
        from req do Validate {
            on FAILURE {
                return UserCreateRequestValidationFailed
            }
        }
        from UserRepository do Create with req returning user {
            on FAILURE {
                return CouldNotCreateUser
            }
        }
        return user
    }

    Update with userID int and req UserUpdateRequest returns User {
        from req do Validate {
            on FAILURE {
                return UserUpdateRequestValidationFailed
            }
        }
        from UserRepository do Lookup with userID returning user {
            on FAILURE {
                return UserNotFound
            }
        }
        from UserRepository do Update with req returning user {
            on FAILURE {
                return CouldNotUpdateUser
            }
        }
        return user
    }

    Lookup with id int returns []User {

    }

    SearchByName with name string returns []User {

    }

    SearchByEmail with email string returns []User {

    }

    SearchAdmins returns []User {

    }
}
