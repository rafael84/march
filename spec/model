# vim:ft=Marchfile

@Table "user.user"
User model {
# type User struct {

    @ID
    ID int
#   ID int64 `annotations:"@ID"`

    @Index
    @MaxLength 100
    Name string
#   Name string `annotations:"@Index @MaxLength(100)"`

    @Validate "email"
    Email string
#   Email string `annotations:"@Validate(email)"`

    @Validate "regex:[a-zA-Z0-9]"
    @Unique
    Login string
#   Login string `annotations:"@Validate(regex:[a-zA-Z0-9]) @Unique"`

    @Hash
    @Hidden
    Password string
#   Password string `annotations:"@Hash @Hidden"`

    @Column "is_admin"
    IsAdmin bool
#   IsAdmin string `annotations:"@Column(is_admin)"`

    @Optional
    Address {
        Phone string
        City string
    }
#   Address *UserAddress `annotations:"@Optional"`

    @JSON
    Metadata {
        LastLogin timestamp
    }
#   Metadata march.JSONB `annotations:"@JSON"`

    @ManyToMany Group
    Groups UserGroup list
#   Group []*UserGroup `annotations:"@ManyToMany(Group)"`

    @ManyToMany Permission
    Permissions UserPermission list
#   Permissions []*UserPermission `annotations:"@ManyToMany(Permission)"`

}
# }
#
# func (e *User) TableName() string {
#       return "user.user"
# }
#
# type UserAddress struct {
#       Phone string
#       City string
# }
#
# type UserMetadata struct {
#       LastLogin timestamp
# }
#
# // Value implements the driver.Valuer interface
# func (um *UserMetadata) Value() (driver.Value, error) {
#       ...
# }
#
# // Scan implements the sql.Scanner interface
# func (um *UserMetadata) Scan(src interface{}) error {
#       ...
# }

@Table "user.group"
Group model {
# type Group struct {

    @ID
    ID int
#   ID int64 `annotations:"@ID"`

    @MaxLength 100
    Name string
#   Name string `annotations:"@MaxLength(100)"`

}
# }
#
# func (e *Group) TableName() string {
#       return "user.group"
# }


@Table "user.user_group"
UserGroup model {
# type UserGroup struct {

    @ID
    @OneToOne
    User User
#   User *User `annotations:"@ID @OneToOne"`
#   UserID int64

    @ID
    @OneToOne
    Group Group
#   Group *Group `annotations:"@ID @OneToOne"`
#   GroupID int64

}
# }
#
# func (e *UserGroup) TableName() string {
#       return "user.user_group"
# }


@Table "user.permission"
Permission model {
# type Permission struct {

    @ID
    ID int
#   ID int64 `annotations:"@ID"`

    Name string
#   Name string

}
# }
#
# func (e *Permission) TableName() string {
#       return "user.permission"
# }


@Table "user.user_permission"
UserPermission model {
# type UserPermission struct {

    @ID
    @OneToOne
    User User
#   User *User `annotations:"@ID @OneToOne"`
#   UserID int64

    @ID
    @OneToOne
    Permission Permission
#   Permission *Permission `annotations:"@ID @OneToOne"`
#   PermissionID int64

    @Default "CURRENT_TIMESTAMP"
    DateGranted timestamp
#   DateGranted time.Date `annotations:"@Default(CURRENT_TIMESTAMP)"`

}
# }
#
# func (e *UserPermission) TableName() string {
#       return "user.user_permission"
# }
